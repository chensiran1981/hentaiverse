2011-11-21
关于Monitor功能，模式和log是类似的。是否可以利用log4j来实现？
先实现一个简单的模式。等框架打通了之后再来关注这个问题。

目前实现的GrindFestTaskRunner是没有保障的。如果在执行过程中切换了任务怎么办?

Runner的3大基本操作：start,pause,stop，本质应该当作3个消息来看待。例如，无法start的时候，应能返回信息通知客户端发生了什么情况。
当前版本并未做消息架构打算，因此简化为通过返回值来通知客户端。

框架终于进行到了HV控制部分。

2011-11-22 2:00 am
启动HV会话模式。
考虑需求：
无冲突的任务可以并行执行，有冲突的任务同步串行执行。可以保存任务断点执行状态，下次从断点重新执行。
任务启动前应检测是否具备执行条件，无法达到继续执行条件的应当放弃并终止任务。

战斗部分可以做成独立模块。通过参数来传递战斗参数、战斗状态、战斗日志。

状态图：
状态
输入事件
事件action

11-11-29
GFTask - GFWorker:检查HV是否允许开始一次GFTask - 是否是一次全新的战斗旅程或者调用旅程进度 - 初始化战斗旅程 - 创建一个虚拟的战斗者 -   
ArenaTask - AreanWorker:检查HV是否允许开始一次ArenaTask - 

GFWorker：连接EH[登录] - 申请HV游戏终端 - 初始化GF游戏 - 构造虚拟玩家 - 完成GF游戏目标 - 释放HV游戏终端 - 释放连接。
ArenaWorker：连接EH[登录] - 申请HV游戏终端 - 初始化Arena游戏 - 构造虚拟玩家 - 完成Arena游戏目标 - 释放HV游戏终端 - 释放连接。

HV游戏终端
：	可暂停、继续、终止、保存和读取进度，可记录、回放战斗过程，可提供图形化界面。

GF虚拟玩家	
:	对不同类型游戏构造相应的游戏操作过程以完成游戏目标。游戏过程包含固定游戏流程和非固定操作。固定流程指HV战斗必须打完1回合才能
	 进入下一回合。非固定操作指不同AI玩家每回合打怪的操作。
	 
:	虚拟玩家诞生自具体游戏，或者也可以设定通吃所有游戏的通用玩家。玩家逻辑可复用或者委托。例如GF战斗逻辑也可适用CF战斗，那么CF玩家
	 可以采用GF战斗逻辑或者将战斗委托给GF玩家。
	 
:	HV玩家的行为由2部分组成：战斗前、战斗中。
	战前准备行为指选择游戏角色以及角色设置。该行为可简可繁。
	战斗行为指战斗开始后的各种打怪操作。战斗逻辑一般只与角色设定、所遇怪物有关，但也可能受游戏的目标影响。例如Arena以通关为目标，
	就可能需要考虑节约蓝耗打法，也可能需要吸蓝，要想尽办法通关。而GF则可以只考虑如何杀死怪物，蓝瓶光了则直接退出。

：	依赖HV游戏终端，从终端获取游戏角色信息。


